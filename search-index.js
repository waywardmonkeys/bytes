var N=null,E="",T="t",U="u",searchIndex={};
var R=["result","Reads an unsigned n-bytes integer from the underlying…","Reads a signed n-bytes integer from the underlying reader.","usize","DEPRECATED.","Writes an unsigned n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","read_u16","read_u24","read_u32","read_u48","read_u64","read_u128","read_uint","read_uint128","Reads an unsigned n-bytes integer from `buf`.","write_u16","write_u24","write_u32","write_u48","write_u64","write_u128","write_uint","write_uint128","Writes an unsigned integer `n` to `buf` using only `nbytes`.","read_i16","read_i24","read_i32","read_i48","read_i64","read_i128","read_int","read_int128","Reads a signed n-bytes integer from `buf`.","read_f32","Reads a IEEE754 single-precision (4 bytes) floating point…","read_f64","Reads a IEEE754 double-precision (8 bytes) floating point…","write_i16","write_i24","write_i32","write_i48","write_i64","write_i128","write_int","write_int128","Writes a signed integer `n` to `buf` using only `nbytes`.","write_f32","Writes a IEEE754 single-precision (4 bytes) floating point…","write_f64","Writes a IEEE754 double-precision (8 bytes) floating point…","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","Reads IEEE754 single-precision (4 bytes) floating point…","read_f64_into_unchecked","to_owned","clone_into","try_from","try_into","borrow_mut","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","bigendian","littleendian","ordering","partial_cmp","formatter","Reads an unsigned 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads an unsigned 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads an unsigned 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads an unsigned 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads an unsigned 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads an unsigned 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads an unsigned 128 bit integer from the underlying…","Reads a signed 128 bit integer from the underlying reader.","Reads a sequence of unsigned 16 bit integers from the…","Reads a sequence of unsigned 32 bit integers from the…","Reads a sequence of unsigned 64 bit integers from the…","Reads a sequence of unsigned 128 bit integers from the…","read_i8_into","Reads a sequence of signed 8 bit integers from the…","Reads a sequence of signed 16 bit integers from the…","Reads a sequence of signed 32 bit integers from the…","Reads a sequence of signed 64 bit integers from the…","Reads a sequence of signed 128 bit integers from the…","Reads a sequence of IEEE754 single-precision (4 bytes)…","Reads a sequence of IEEE754 double-precision (8 bytes)…","Writes an unsigned 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes an unsigned 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","ReadBytesExt","WriteBytesExt","ByteOrder","BigEndian","LittleEndian","into_inner","Gets a reference to the underlying `Buf`.","Gets a mutable reference to the underlying `Buf`.","Gets an unsigned 32 bit integer from `self` in the…","Gets an IEEE754 single-precision (4 bytes) floating point…","Gets an IEEE754 double-precision (8 bytes) floating point…","Transfer bytes into `self` from `src` and advance the…","Writes an IEEE754 single-precision (4 bytes) floating…","Writes an IEEE754 double-precision (8 bytes) floating…","Splits the bytes into two at the given index.","bytesmut","with_capacity","is_inline","split_off","Shortens the buffer, keeping the first `len` bytes and…","Clears the buffer, removing all data.","extend_from_slice","Appends given bytes to this object.","Returns an iterator over the bytes contained by the buffer.","Read bytes from a buffer.","remaining","Returns the number of bytes between the current position…","Returns a slice starting at the current position and of…","bytes_vectored","bytes::buf","Fills `dst` with potentially multiple slices starting at…","Advance the internal cursor of the Buf","has_remaining","Returns true if there are any more bytes to consume","copy_to_slice","Copies bytes from `self` into `dst`.","Gets an unsigned 8 bit integer from `self`.","Gets a signed 8 bit integer from `self`.","Gets an unsigned 16 bit integer from `self` in big-endian…","get_u16_le","Gets an unsigned 16 bit integer from `self` in…","Gets a signed 16 bit integer from `self` in big-endian…","get_i16_le","Gets a signed 16 bit integer from `self` in little-endian…","get_u32_le","Gets a signed 32 bit integer from `self` in big-endian…","get_i32_le","Gets a signed 32 bit integer from `self` in little-endian…","Gets an unsigned 64 bit integer from `self` in big-endian…","get_u64_le","Gets an unsigned 64 bit integer from `self` in…","Gets a signed 64 bit integer from `self` in big-endian…","get_i64_le","Gets a signed 64 bit integer from `self` in little-endian…","Gets an unsigned n-byte integer from `self` in big-endian…","get_uint_le","Gets an unsigned n-byte integer from `self` in…","Gets a signed n-byte integer from `self` in big-endian…","get_int_le","Gets a signed n-byte integer from `self` in little-endian…","get_f32_le","get_f64_le","Transforms a `Buf` into a concrete buffer.","Creates an adaptor which will read at most `limit` bytes…","Creates an adaptor which will chain this buffer with…","Creates a \"by reference\" adaptor for this instance of `Buf`.","Creates an adaptor which implements the `Read` trait for…","A trait for values that provide sequential write access to…","remaining_mut","Returns the number of bytes that can be written from the…","advance_mut","Advance the internal cursor of the BufMut","has_remaining_mut","Returns true if there is space in `self` for more bytes.","bytes_mut","Returns a mutable slice starting at the current BufMut…","bytes_vectored_mut","Fills `dst` with potentially multiple mutable slices…","put_slice","Writes an unsigned 8 bit integer to `self`.","Writes a signed 8 bit integer to `self`.","Writes an unsigned 16 bit integer to `self` in big-endian…","put_u16_le","Writes an unsigned 16 bit integer to `self` in…","Writes a signed 16 bit integer to `self` in big-endian…","put_i16_le","Writes a signed 16 bit integer to `self` in little-endian…","Writes an unsigned 32 bit integer to `self` in big-endian…","put_u32_le","Writes an unsigned 32 bit integer to `self` in…","Writes a signed 32 bit integer to `self` in big-endian…","put_i32_le","Writes a signed 32 bit integer to `self` in little-endian…","Writes an unsigned 64 bit integer to `self` in the…","put_u64_le","Writes an unsigned 64 bit integer to `self` in…","Writes a signed 64 bit integer to `self` in the big-endian…","put_i64_le","Writes a signed 64 bit integer to `self` in little-endian…","Writes an unsigned n-byte integer to `self` in big-endian…","put_uint_le","Writes an unsigned n-byte integer to `self` in the…","Writes a signed n-byte integer to `self` in big-endian…","put_int_le","Writes a signed n-byte integer to `self` in little-endian…","put_f32_le","put_f64_le","Creates a \"by reference\" adaptor for this instance of…","Creates an adaptor which implements the `Write` trait for…","Conversion into a `Buf`","The `Buf` type that `self` is being converted into","Creates a `Buf` from a value.","into_iter","type_id","advance","from_buf","from_iter","intoiterator","get_uint","put_uint"];
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and…","i":[[4,R[127],"byteorder","Defines big-endian serialization.",N,N],[4,R[128],E,"Defines little-endian serialization.",N,N],[6,"BE",E,"A type alias for [`BigEndian`].",N,N],[6,"LE",E,"A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian",E,"Defines network byte order serialization.",N,N],[6,"NativeEndian",E,"Defines system native-endian serialization.",N,N],[8,R[124],E,"Extends [`Read`] with methods for reading numbers. (For…",N,N],[11,"read_u8",E,R[84],0,[[["self"]],[[R[0],["u8"]],["u8"]]]],[11,"read_i8",E,R[85],0,[[["self"]],[["i8"],[R[0],["i8"]]]]],[11,R[7],E,R[86],0,[[["self"]],[["u16"],[R[0],["u16"]]]]],[11,R[25],E,R[87],0,[[["self"]],[["i16"],[R[0],["i16"]]]]],[11,R[8],E,R[88],0,[[["self"]],[["u32"],[R[0],["u32"]]]]],[11,R[26],E,R[89],0,[[["self"]],[["i32"],[R[0],["i32"]]]]],[11,R[9],E,R[90],0,[[["self"]],[["u32"],[R[0],["u32"]]]]],[11,R[27],E,R[91],0,[[["self"]],[["i32"],[R[0],["i32"]]]]],[11,R[10],E,R[92],0,[[["self"]],[[R[0],["u64"]],["u64"]]]],[11,R[28],E,R[93],0,[[["self"]],[[R[0],["i64"]],["i64"]]]],[11,R[11],E,R[94],0,[[["self"]],[[R[0],["u64"]],["u64"]]]],[11,R[29],E,R[95],0,[[["self"]],[[R[0],["i64"]],["i64"]]]],[11,R[12],E,R[96],0,[[["self"]],[[R[0],["u128"]],["u128"]]]],[11,R[30],E,R[97],0,[[["self"]],[[R[0],["i128"]],["i128"]]]],[11,R[13],E,R[1],0,[[["self"],[R[3]]],[[R[0],["u64"]],["u64"]]]],[11,R[31],E,R[2],0,[[["self"],[R[3]]],[[R[0],["i64"]],["i64"]]]],[11,R[14],E,R[1],0,[[["self"],[R[3]]],[[R[0],["u128"]],["u128"]]]],[11,R[32],E,R[2],0,[[["self"],[R[3]]],[[R[0],["i128"]],["i128"]]]],[11,R[34],E,R[35],0,[[["self"]],[["f32"],[R[0],["f32"]]]]],[11,R[36],E,R[37],0,[[["self"]],[["f64"],[R[0],["f64"]]]]],[11,R[51],E,R[98],0,[[["self"]],[R[0]]]],[11,R[52],E,R[99],0,[[["self"]],[R[0]]]],[11,R[53],E,R[100],0,[[["self"]],[R[0]]]],[11,R[54],E,R[101],0,[[["self"]],[R[0]]]],[11,R[102],E,R[103],0,[[["self"]],[R[0]]]],[11,R[55],E,R[104],0,[[["self"]],[R[0]]]],[11,R[56],E,R[105],0,[[["self"]],[R[0]]]],[11,R[57],E,R[106],0,[[["self"]],[R[0]]]],[11,R[58],E,R[107],0,[[["self"]],[R[0]]]],[11,R[59],E,R[108],0,[[["self"]],[R[0]]]],[11,R[60],E,R[4],0,[[["self"]],[R[0]]]],[11,R[61],E,R[109],0,[[["self"]],[R[0]]]],[11,R[63],E,R[4],0,[[["self"]],[R[0]]]],[8,R[125],E,"Extends [`Write`] with methods for writing numbers. (For…",N,N],[11,"write_u8",E,R[110],1,[[["self"],["u8"]],[R[0]]]],[11,"write_i8",E,R[111],1,[[["self"],["i8"]],[R[0]]]],[11,R[16],E,R[112],1,[[["self"],["u16"]],[R[0]]]],[11,R[38],E,R[113],1,[[["self"],["i16"]],[R[0]]]],[11,R[17],E,R[114],1,[[["self"],["u32"]],[R[0]]]],[11,R[39],E,R[115],1,[[["self"],["i32"]],[R[0]]]],[11,R[18],E,R[116],1,[[["self"],["u32"]],[R[0]]]],[11,R[40],E,R[117],1,[[["self"],["i32"]],[R[0]]]],[11,R[19],E,R[118],1,[[["self"],["u64"]],[R[0]]]],[11,R[41],E,R[119],1,[[["self"],["i64"]],[R[0]]]],[11,R[20],E,R[120],1,[[["self"],["u64"]],[R[0]]]],[11,R[42],E,R[121],1,[[["self"],["i64"]],[R[0]]]],[11,R[21],E,R[122],1,[[["self"],["u128"]],[R[0]]]],[11,R[43],E,R[123],1,[[["self"],["i128"]],[R[0]]]],[11,R[22],E,R[5],1,[[["self"],["u64"],[R[3]]],[R[0]]]],[11,R[44],E,R[6],1,[[["self"],["i64"],[R[3]]],[R[0]]]],[11,R[23],E,R[5],1,[[["self"],[R[3]],["u128"]],[R[0]]]],[11,R[45],E,R[6],1,[[["self"],["i128"],[R[3]]],[R[0]]]],[11,R[47],E,R[48],1,[[["self"],["f32"]],[R[0]]]],[11,R[49],E,R[50],1,[[["self"],["f64"]],[R[0]]]],[8,R[126],E,"`ByteOrder` describes types that can serialize integers as…",N,N],[10,R[7],E,"Reads an unsigned 16 bit integer from `buf`.",2,[[],["u16"]]],[11,R[8],E,"Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,[[],["u32"]]],[10,R[9],E,"Reads an unsigned 32 bit integer from `buf`.",2,[[],["u32"]]],[11,R[10],E,"Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,[[],["u64"]]],[10,R[11],E,"Reads an unsigned 64 bit integer from `buf`.",2,[[],["u64"]]],[10,R[12],E,"Reads an unsigned 128 bit integer from `buf`.",2,[[],["u128"]]],[10,R[13],E,R[15],2,[[[R[3]]],["u64"]]],[10,R[14],E,R[15],2,[[[R[3]]],["u128"]]],[10,R[16],E,"Writes an unsigned 16 bit integer `n` to `buf`.",2,[[["u16"]]]],[11,R[17],E,"Writes an unsigned 24 bit integer `n` to `buf`, stored in…",2,[[["u32"]]]],[10,R[18],E,"Writes an unsigned 32 bit integer `n` to `buf`.",2,[[["u32"]]]],[11,R[19],E,"Writes an unsigned 48 bit integer `n` to `buf`, stored in…",2,[[["u64"]]]],[10,R[20],E,"Writes an unsigned 64 bit integer `n` to `buf`.",2,[[["u64"]]]],[10,R[21],E,"Writes an unsigned 128 bit integer `n` to `buf`.",2,[[["u128"]]]],[10,R[22],E,R[24],2,[[[R[3]],["u64"]]]],[10,R[23],E,R[24],2,[[["u128"],[R[3]]]]],[11,R[25],E,"Reads a signed 16 bit integer from `buf`.",2,[[],["i16"]]],[11,R[26],E,"Reads a signed 24 bit integer from `buf`, stored in i32.",2,[[],["i32"]]],[11,R[27],E,"Reads a signed 32 bit integer from `buf`.",2,[[],["i32"]]],[11,R[28],E,"Reads a signed 48 bit integer from `buf`, stored in i64.",2,[[],["i64"]]],[11,R[29],E,"Reads a signed 64 bit integer from `buf`.",2,[[],["i64"]]],[11,R[30],E,"Reads a signed 128 bit integer from `buf`.",2,[[],["i128"]]],[11,R[31],E,R[33],2,[[[R[3]]],["i64"]]],[11,R[32],E,R[33],2,[[[R[3]]],["i128"]]],[11,R[34],E,R[35],2,[[],["f32"]]],[11,R[36],E,R[37],2,[[],["f64"]]],[11,R[38],E,"Writes a signed 16 bit integer `n` to `buf`.",2,[[["i16"]]]],[11,R[39],E,"Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,[[["i32"]]]],[11,R[40],E,"Writes a signed 32 bit integer `n` to `buf`.",2,[[["i32"]]]],[11,R[41],E,"Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,[[["i64"]]]],[11,R[42],E,"Writes a signed 64 bit integer `n` to `buf`.",2,[[["i64"]]]],[11,R[43],E,"Writes a signed 128 bit integer `n` to `buf`.",2,[[["i128"]]]],[11,R[44],E,R[46],2,[[["i64"],[R[3]]]]],[11,R[45],E,R[46],2,[[["i128"],[R[3]]]]],[11,R[47],E,R[48],2,[[["f32"]]]],[11,R[49],E,R[50],2,[[["f64"]]]],[10,R[51],E,"Reads unsigned 16 bit integers from `src` into `dst`.",2,[[]]],[10,R[52],E,"Reads unsigned 32 bit integers from `src` into `dst`.",2,[[]]],[10,R[53],E,"Reads unsigned 64 bit integers from `src` into `dst`.",2,[[]]],[10,R[54],E,"Reads unsigned 128 bit integers from `src` into `dst`.",2,[[]]],[11,R[55],E,"Reads signed 16 bit integers from `src` to `dst`.",2,[[]]],[11,R[56],E,"Reads signed 32 bit integers from `src` into `dst`.",2,[[]]],[11,R[57],E,"Reads signed 64 bit integers from `src` into `dst`.",2,[[]]],[11,R[58],E,"Reads signed 128 bit integers from `src` into `dst`.",2,[[]]],[11,R[59],E,R[62],2,[[]]],[11,R[60],E,R[4],2,[[]]],[11,R[61],E,R[62],2,[[]]],[11,R[63],E,R[4],2,[[]]],[10,R[69],E,"Writes unsigned 16 bit integers from `src` into `dst`.",2,[[]]],[10,R[70],E,"Writes unsigned 32 bit integers from `src` into `dst`.",2,[[]]],[10,R[71],E,"Writes unsigned 64 bit integers from `src` into `dst`.",2,[[]]],[10,R[72],E,"Writes unsigned 128 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i16_into",E,"Writes signed 16 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i32_into",E,"Writes signed 32 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i64_into",E,"Writes signed 64 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i128_into",E,"Writes signed 128 bit integers from `src` into `dst`.",2,[[]]],[11,"write_f32_into",E,"Writes IEEE754 single-precision (4 bytes) floating point…",2,[[]]],[11,"write_f64_into",E,"Writes IEEE754 double-precision (8 bytes) floating point…",2,[[]]],[10,R[73],E,"Converts the given slice of unsigned 16 bit integers to a…",2,[[]]],[10,R[74],E,"Converts the given slice of unsigned 32 bit integers to a…",2,[[]]],[10,R[75],E,"Converts the given slice of unsigned 64 bit integers to a…",2,[[]]],[10,R[76],E,"Converts the given slice of unsigned 128 bit integers to a…",2,[[]]],[11,"from_slice_i16",E,"Converts the given slice of signed 16 bit integers to a…",2,[[]]],[11,"from_slice_i32",E,"Converts the given slice of signed 32 bit integers to a…",2,[[]]],[11,"from_slice_i64",E,"Converts the given slice of signed 64 bit integers to a…",2,[[]]],[11,"from_slice_i128",E,"Converts the given slice of signed 128 bit integers to a…",2,[[]]],[10,R[77],E,"Converts the given slice of IEEE754 single-precision (4…",2,[[]]],[10,R[78],E,"Converts the given slice of IEEE754 double-precision (8…",2,[[]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[64],E,E,3,[[["self"]],[T]]],[11,R[65],E,E,3,[[[T],["self"]]]],[11,"into",E,E,3,[[],[U]]],[11,R[66],E,E,3,[[[U]],[R[0]]]],[11,R[67],E,E,3,[[],[R[0]]]],[11,R[68],E,E,3,[[["self"]],[T]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[237],E,E,3,[[["self"]],["typeid"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[64],E,E,4,[[["self"]],[T]]],[11,R[65],E,E,4,[[[T],["self"]]]],[11,"into",E,E,4,[[],[U]]],[11,R[66],E,E,4,[[[U]],[R[0]]]],[11,R[67],E,E,4,[[],[R[0]]]],[11,R[68],E,E,4,[[["self"]],[T]]],[11,"borrow",E,E,4,[[["self"]],[T]]],[11,R[237],E,E,4,[[["self"]],["typeid"]]],[11,R[7],E,E,3,[[],["u16"]]],[11,R[9],E,E,3,[[],["u32"]]],[11,R[11],E,E,3,[[],["u64"]]],[11,R[12],E,E,3,[[],["u128"]]],[11,R[13],E,E,3,[[[R[3]]],["u64"]]],[11,R[14],E,E,3,[[[R[3]]],["u128"]]],[11,R[16],E,E,3,[[["u16"]]]],[11,R[18],E,E,3,[[["u32"]]]],[11,R[20],E,E,3,[[["u64"]]]],[11,R[21],E,E,3,[[["u128"]]]],[11,R[22],E,E,3,[[[R[3]],["u64"]]]],[11,R[23],E,E,3,[[["u128"],[R[3]]]]],[11,R[51],E,E,3,[[]]],[11,R[52],E,E,3,[[]]],[11,R[53],E,E,3,[[]]],[11,R[54],E,E,3,[[]]],[11,R[69],E,E,3,[[]]],[11,R[70],E,E,3,[[]]],[11,R[71],E,E,3,[[]]],[11,R[72],E,E,3,[[]]],[11,R[73],E,E,3,[[]]],[11,R[74],E,E,3,[[]]],[11,R[75],E,E,3,[[]]],[11,R[76],E,E,3,[[]]],[11,R[77],E,E,3,[[]]],[11,R[78],E,E,3,[[]]],[11,R[7],E,E,4,[[],["u16"]]],[11,R[9],E,E,4,[[],["u32"]]],[11,R[11],E,E,4,[[],["u64"]]],[11,R[12],E,E,4,[[],["u128"]]],[11,R[13],E,E,4,[[[R[3]]],["u64"]]],[11,R[14],E,E,4,[[[R[3]]],["u128"]]],[11,R[16],E,E,4,[[["u16"]]]],[11,R[18],E,E,4,[[["u32"]]]],[11,R[20],E,E,4,[[["u64"]]]],[11,R[21],E,E,4,[[["u128"]]]],[11,R[22],E,E,4,[[[R[3]],["u64"]]]],[11,R[23],E,E,4,[[["u128"],[R[3]]]]],[11,R[51],E,E,4,[[]]],[11,R[52],E,E,4,[[]]],[11,R[53],E,E,4,[[]]],[11,R[54],E,E,4,[[]]],[11,R[69],E,E,4,[[]]],[11,R[70],E,E,4,[[]]],[11,R[71],E,E,4,[[]]],[11,R[72],E,E,4,[[]]],[11,R[73],E,E,4,[[]]],[11,R[74],E,E,4,[[]]],[11,R[75],E,E,4,[[]]],[11,R[76],E,E,4,[[]]],[11,R[77],E,E,4,[[]]],[11,R[78],E,E,4,[[]]],[11,"eq",E,E,3,[[["self"],[R[79]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[80]]],["bool"]]],[11,"clone",E,E,3,[[["self"]],[R[79]]]],[11,"clone",E,E,4,[[["self"]],[R[80]]]],[11,"cmp",E,E,3,[[["self"],[R[79]]],[R[81]]]],[11,"cmp",E,E,4,[[["self"],[R[80]]],[R[81]]]],[11,"default",E,E,3,[[],[R[79]]]],[11,"default",E,E,4,[[],[R[80]]]],[11,R[82],E,E,3,[[["self"],[R[79]]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,4,[[["self"],[R[80]]],[["option",[R[81]]],[R[81]]]]],[11,"fmt",E,E,3,[[["self"],[R[83]]],[R[0]]]],[11,"fmt",E,E,4,[[["self"],[R[83]]],[R[0]]]],[11,"hash",E,E,3,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"read_u8",E,R[84],0,[[["self"]],[[R[0],["u8"]],["u8"]]]],[11,"read_i8",E,R[85],0,[[["self"]],[["i8"],[R[0],["i8"]]]]],[11,R[7],E,R[86],0,[[["self"]],[["u16"],[R[0],["u16"]]]]],[11,R[25],E,R[87],0,[[["self"]],[["i16"],[R[0],["i16"]]]]],[11,R[8],E,R[88],0,[[["self"]],[["u32"],[R[0],["u32"]]]]],[11,R[26],E,R[89],0,[[["self"]],[["i32"],[R[0],["i32"]]]]],[11,R[9],E,R[90],0,[[["self"]],[["u32"],[R[0],["u32"]]]]],[11,R[27],E,R[91],0,[[["self"]],[["i32"],[R[0],["i32"]]]]],[11,R[10],E,R[92],0,[[["self"]],[[R[0],["u64"]],["u64"]]]],[11,R[28],E,R[93],0,[[["self"]],[[R[0],["i64"]],["i64"]]]],[11,R[11],E,R[94],0,[[["self"]],[[R[0],["u64"]],["u64"]]]],[11,R[29],E,R[95],0,[[["self"]],[[R[0],["i64"]],["i64"]]]],[11,R[12],E,R[96],0,[[["self"]],[[R[0],["u128"]],["u128"]]]],[11,R[30],E,R[97],0,[[["self"]],[[R[0],["i128"]],["i128"]]]],[11,R[13],E,R[1],0,[[["self"],[R[3]]],[[R[0],["u64"]],["u64"]]]],[11,R[31],E,R[2],0,[[["self"],[R[3]]],[[R[0],["i64"]],["i64"]]]],[11,R[14],E,R[1],0,[[["self"],[R[3]]],[[R[0],["u128"]],["u128"]]]],[11,R[32],E,R[2],0,[[["self"],[R[3]]],[[R[0],["i128"]],["i128"]]]],[11,R[34],E,R[35],0,[[["self"]],[["f32"],[R[0],["f32"]]]]],[11,R[36],E,R[37],0,[[["self"]],[["f64"],[R[0],["f64"]]]]],[11,R[51],E,R[98],0,[[["self"]],[R[0]]]],[11,R[52],E,R[99],0,[[["self"]],[R[0]]]],[11,R[53],E,R[100],0,[[["self"]],[R[0]]]],[11,R[54],E,R[101],0,[[["self"]],[R[0]]]],[11,R[102],E,R[103],0,[[["self"]],[R[0]]]],[11,R[55],E,R[104],0,[[["self"]],[R[0]]]],[11,R[56],E,R[105],0,[[["self"]],[R[0]]]],[11,R[57],E,R[106],0,[[["self"]],[R[0]]]],[11,R[58],E,R[107],0,[[["self"]],[R[0]]]],[11,R[59],E,R[108],0,[[["self"]],[R[0]]]],[11,R[60],E,R[4],0,[[["self"]],[R[0]]]],[11,R[61],E,R[109],0,[[["self"]],[R[0]]]],[11,R[63],E,R[4],0,[[["self"]],[R[0]]]],[11,"write_u8",E,R[110],1,[[["self"],["u8"]],[R[0]]]],[11,"write_i8",E,R[111],1,[[["self"],["i8"]],[R[0]]]],[11,R[16],E,R[112],1,[[["self"],["u16"]],[R[0]]]],[11,R[38],E,R[113],1,[[["self"],["i16"]],[R[0]]]],[11,R[17],E,R[114],1,[[["self"],["u32"]],[R[0]]]],[11,R[39],E,R[115],1,[[["self"],["i32"]],[R[0]]]],[11,R[18],E,R[116],1,[[["self"],["u32"]],[R[0]]]],[11,R[40],E,R[117],1,[[["self"],["i32"]],[R[0]]]],[11,R[19],E,R[118],1,[[["self"],["u64"]],[R[0]]]],[11,R[41],E,R[119],1,[[["self"],["i64"]],[R[0]]]],[11,R[20],E,R[120],1,[[["self"],["u64"]],[R[0]]]],[11,R[42],E,R[121],1,[[["self"],["i64"]],[R[0]]]],[11,R[21],E,R[122],1,[[["self"],["u128"]],[R[0]]]],[11,R[43],E,R[123],1,[[["self"],["i128"]],[R[0]]]],[11,R[22],E,R[5],1,[[["self"],["u64"],[R[3]]],[R[0]]]],[11,R[44],E,R[6],1,[[["self"],["i64"],[R[3]]],[R[0]]]],[11,R[23],E,R[5],1,[[["self"],[R[3]],["u128"]],[R[0]]]],[11,R[45],E,R[6],1,[[["self"],["i128"],[R[3]]],[R[0]]]],[11,R[47],E,R[48],1,[[["self"],["f32"]],[R[0]]]],[11,R[49],E,R[50],1,[[["self"],["f64"]],[R[0]]]]],"p":[[8,R[124]],[8,R[125]],[8,R[126]],[4,R[127]],[4,R[128]]]};
searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","i":[[3,"Bytes","bytes","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut",E,"A unique reference to a contiguous slice of memory.",N,N],[0,"buf",E,"Utilities for working with buffers.",N,N],[3,"Chain",R[153],"A `Chain` sequences two buffers.",N,N],[3,"IntoIter",E,"Iterator over the bytes contained by the buffer.",N,N],[3,"Reader",E,"A `Buf` adapter which implements `io::Read` for the inner…",N,N],[3,"Take",E,"A `Buf` adapter which limits the bytes read from an…",N,N],[3,"Writer",E,"A `BufMut` adapter which implements `io::Write` for the…",N,N],[11,"new",E,"Creates a new `Chain` sequencing the provided values.",0,[[[U],[T]],["chain"]]],[11,"first_ref",E,"Gets a reference to the first underlying `Buf`.",0,[[["self"]],[T]]],[11,"first_mut",E,"Gets a mutable reference to the first underlying `Buf`.",0,[[["self"]],[T]]],[11,"last_ref",E,"Gets a reference to the last underlying `Buf`.",0,[[["self"]],[U]]],[11,"last_mut",E,"Gets a mutable reference to the last underlying `Buf`.",0,[[["self"]],[U]]],[11,R[129],E,"Consumes this `Chain`, returning the underlying values.",0,[[]]],[11,"new",E,"Creates an iterator over the bytes contained by the buffer.",1,[[[T]],["intoiter"]]],[11,R[129],E,"Consumes this `IntoIter`, returning the underlying value.",1,[[],[T]]],[11,"get_ref",E,R[130],1,[[["self"]],[T]]],[11,"get_mut",E,R[131],1,[[["self"]],[T]]],[11,"get_ref",E,R[130],2,[[["self"]],["b"]]],[11,"get_mut",E,R[131],2,[[["self"]],["b"]]],[11,R[129],E,"Consumes this `Reader`, returning the underlying value.",2,[[],["b"]]],[11,R[129],E,"Consumes this `Take`, returning the underlying value.",3,[[],[T]]],[11,"get_ref",E,R[130],3,[[["self"]],[T]]],[11,"get_mut",E,R[131],3,[[["self"]],[T]]],[11,"limit",E,"Returns the maximum number of bytes that can be read.",3,[[["self"]],[R[3]]]],[11,"set_limit",E,"Sets the maximum number of bytes that can be read.",3,[[["self"],[R[3]]]]],[11,"get_ref",E,"Gets a reference to the underlying `BufMut`.",4,[[["self"]],["b"]]],[11,"get_mut",E,"Gets a mutable reference to the underlying `BufMut`.",4,[[["self"]],["b"]]],[11,R[129],E,"Consumes this `Writer`, returning the underlying value.",4,[[],["b"]]],[8,"Buf",E,R[148],N,N],[10,R[149],E,R[150],5,[[["self"]],[R[3]]]],[10,"bytes",E,R[151],5,[[["self"]]]],[11,R[152],E,R[154],5,[[["self"]],[R[3]]]],[10,R[238],E,R[155],5,[[["self"],[R[3]]]]],[11,R[156],E,R[157],5,[[["self"]],["bool"]]],[11,R[158],E,R[159],5,[[["self"]]]],[11,"get_u8",E,R[160],5,[[["self"]],["u8"]]],[11,"get_i8",E,R[161],5,[[["self"]],["i8"]]],[11,"get_u16",E,R[162],5,[[["self"]],["u16"]]],[11,R[163],E,R[164],5,[[["self"]],["u16"]]],[11,"get_i16",E,R[165],5,[[["self"]],["i16"]]],[11,R[166],E,R[167],5,[[["self"]],["i16"]]],[11,"get_u32",E,R[132],5,[[["self"]],["u32"]]],[11,R[168],E,R[132],5,[[["self"]],["u32"]]],[11,"get_i32",E,R[169],5,[[["self"]],["i32"]]],[11,R[170],E,R[171],5,[[["self"]],["i32"]]],[11,"get_u64",E,R[172],5,[[["self"]],["u64"]]],[11,R[173],E,R[174],5,[[["self"]],["u64"]]],[11,"get_i64",E,R[175],5,[[["self"]],["i64"]]],[11,R[176],E,R[177],5,[[["self"]],["i64"]]],[11,R[242],E,R[178],5,[[["self"],[R[3]]],["u64"]]],[11,R[179],E,R[180],5,[[["self"],[R[3]]],["u64"]]],[11,"get_int",E,R[181],5,[[["self"],[R[3]]],["i64"]]],[11,R[182],E,R[183],5,[[["self"],[R[3]]],["i64"]]],[11,"get_f32",E,R[133],5,[[["self"]],["f32"]]],[11,R[184],E,R[133],5,[[["self"]],["f32"]]],[11,"get_f64",E,R[134],5,[[["self"]],["f64"]]],[11,R[185],E,R[134],5,[[["self"]],["f64"]]],[11,"collect",E,R[186],5,[[],["b"]]],[11,"take",E,R[187],5,[[[R[3]]],["take"]]],[11,"chain",E,R[188],5,[[[U]],["chain"]]],[11,"by_ref",E,R[189],5,[[["self"]],["self"]]],[11,"reader",E,R[190],5,[[],["reader"]]],[8,"BufMut",E,R[191],N,N],[10,R[192],E,R[193],6,[[["self"]],[R[3]]]],[10,R[194],E,R[195],6,[[["self"],[R[3]]]]],[11,R[196],E,R[197],6,[[["self"]],["bool"]]],[10,R[198],E,R[199],6,[[["self"]]]],[11,R[200],E,R[201],6,[[["self"]],[R[3]]]],[11,"put",E,R[135],6,[[["self"],["intobuf"]]]],[11,R[202],E,R[135],6,[[["self"]]]],[11,"put_u8",E,R[203],6,[[["self"],["u8"]]]],[11,"put_i8",E,R[204],6,[[["self"],["i8"]]]],[11,"put_u16",E,R[205],6,[[["self"],["u16"]]]],[11,R[206],E,R[207],6,[[["self"],["u16"]]]],[11,"put_i16",E,R[208],6,[[["self"],["i16"]]]],[11,R[209],E,R[210],6,[[["self"],["i16"]]]],[11,"put_u32",E,R[211],6,[[["self"],["u32"]]]],[11,R[212],E,R[213],6,[[["self"],["u32"]]]],[11,"put_i32",E,R[214],6,[[["self"],["i32"]]]],[11,R[215],E,R[216],6,[[["self"],["i32"]]]],[11,"put_u64",E,R[217],6,[[["self"],["u64"]]]],[11,R[218],E,R[219],6,[[["self"],["u64"]]]],[11,"put_i64",E,R[220],6,[[["self"],["i64"]]]],[11,R[221],E,R[222],6,[[["self"],["i64"]]]],[11,R[243],E,R[223],6,[[["self"],["u64"],[R[3]]]]],[11,R[224],E,R[225],6,[[["self"],["u64"],[R[3]]]]],[11,"put_int",E,R[226],6,[[["self"],["i64"],[R[3]]]]],[11,R[227],E,R[228],6,[[["self"],["i64"],[R[3]]]]],[11,"put_f32",E,R[136],6,[[["self"],["f32"]]]],[11,R[229],E,R[136],6,[[["self"],["f32"]]]],[11,"put_f64",E,R[137],6,[[["self"],["f64"]]]],[11,R[230],E,R[137],6,[[["self"],["f64"]]]],[11,"by_ref",E,R[231],6,[[["self"]],["self"]]],[11,"writer",E,R[232],6,[[],["writer"]]],[8,"FromBuf",E,"Conversion from a [`Buf`]",N,N],[10,R[239],E,"Creates a value from a buffer.",7,[[[T]],["self"]]],[8,"IntoBuf",E,R[233],N,N],[16,"Buf",E,R[234],8,N],[10,"into_buf",E,R[235],8,[[]]],[11,R[140],"bytes","Creates a new `Bytes` with the specified capacity.",9,[[[R[3]]],["bytes"]]],[11,"new",E,"Creates a new empty `Bytes`.",9,[[],["bytes"]]],[11,"from_static",E,"Creates a new `Bytes` from a static slice.",9,[[],["bytes"]]],[11,"len",E,"Returns the number of bytes contained in this `Bytes`.",9,[[["self"]],[R[3]]]],[11,"is_empty",E,"Returns true if the `Bytes` has a length of 0.",9,[[["self"]],["bool"]]],[11,R[141],E,"Return true if the `Bytes` uses inline allocation",9,[[["self"]],["bool"]]],[11,"slice",E,"Returns a slice of self for the provided range.",9,[[["self"]],["bytes"]]],[11,"slice_ref",E,"Returns a slice of self that is equivalent to the given…",9,[[["self"]],["bytes"]]],[11,R[142],E,R[138],9,[[["self"],[R[3]]],["bytes"]]],[11,"split_to",E,R[138],9,[[["self"],[R[3]]],["bytes"]]],[11,"truncate",E,R[143],9,[[["self"],[R[3]]]]],[11,"clear",E,R[144],9,[[["self"]]]],[11,"try_mut",E,"Attempts to convert into a `BytesMut` handle.",9,[[],[["bytes"],[R[139]],[R[0],[R[139],"bytes"]]]]],[11,"to_mut",E,"Acquires a mutable reference to the owned form of the data.",9,[[["self"]],[R[139]]]],[11,R[145],E,R[146],9,[[["self"]]]],[11,"unsplit",E,"Combine splitted Bytes objects back as contiguous.",9,[[["self"],["bytes"]]]],[11,"iter",E,R[147],9,[[["self"]],[["u8"],["iter",["u8"]]]]],[11,R[140],E,"Creates a new `BytesMut` with the specified capacity.",10,[[[R[3]]],[R[139]]]],[11,"new",E,"Creates a new `BytesMut` with default capacity.",10,[[],[R[139]]]],[11,"len",E,"Returns the number of bytes contained in this `BytesMut`.",10,[[["self"]],[R[3]]]],[11,"is_empty",E,"Returns true if the `BytesMut` has a length of 0.",10,[[["self"]],["bool"]]],[11,R[141],E,"Return true if the `BytesMut` uses inline allocation",10,[[["self"]],["bool"]]],[11,"capacity",E,"Returns the number of bytes the `BytesMut` can hold…",10,[[["self"]],[R[3]]]],[11,"freeze",E,"Converts `self` into an immutable `Bytes`.",10,[[],["bytes"]]],[11,R[142],E,R[138],10,[[["self"],[R[3]]],[R[139]]]],[11,"split",E,"Removes the bytes from the current view, returning them in…",10,[[["self"]],[R[139]]]],[11,"split_to",E,"Splits the buffer into two at the given index.",10,[[["self"],[R[3]]],[R[139]]]],[11,"truncate",E,R[143],10,[[["self"],[R[3]]]]],[11,"clear",E,R[144],10,[[["self"]]]],[11,"resize",E,"Resizes the buffer so that `len` is equal to `new_len`.",10,[[["self"],[R[3]],["u8"]]]],[11,"set_len",E,"Sets the length of the buffer.",10,[[["self"],[R[3]]]]],[11,"reserve",E,"Reserves capacity for at least `additional` more bytes to…",10,[[["self"],[R[3]]]]],[11,R[145],E,R[146],10,[[["self"]]]],[11,"unsplit",E,"Combine splitted BytesMut objects back as contiguous.",10,[[["self"],[R[139]]]]],[11,"iter",E,R[147],10,[[["self"]],[["u8"],["iter",["u8"]]]]],[8,"Buf",E,R[148],N,N],[10,R[149],E,R[150],5,[[["self"]],[R[3]]]],[10,"bytes",E,R[151],5,[[["self"]]]],[11,R[152],R[153],R[154],5,[[["self"]],[R[3]]]],[10,R[238],"bytes",R[155],5,[[["self"],[R[3]]]]],[11,R[156],R[153],R[157],5,[[["self"]],["bool"]]],[11,R[158],E,R[159],5,[[["self"]]]],[11,"get_u8",E,R[160],5,[[["self"]],["u8"]]],[11,"get_i8",E,R[161],5,[[["self"]],["i8"]]],[11,"get_u16",E,R[162],5,[[["self"]],["u16"]]],[11,R[163],E,R[164],5,[[["self"]],["u16"]]],[11,"get_i16",E,R[165],5,[[["self"]],["i16"]]],[11,R[166],E,R[167],5,[[["self"]],["i16"]]],[11,"get_u32",E,R[132],5,[[["self"]],["u32"]]],[11,R[168],E,R[132],5,[[["self"]],["u32"]]],[11,"get_i32",E,R[169],5,[[["self"]],["i32"]]],[11,R[170],E,R[171],5,[[["self"]],["i32"]]],[11,"get_u64",E,R[172],5,[[["self"]],["u64"]]],[11,R[173],E,R[174],5,[[["self"]],["u64"]]],[11,"get_i64",E,R[175],5,[[["self"]],["i64"]]],[11,R[176],E,R[177],5,[[["self"]],["i64"]]],[11,R[242],E,R[178],5,[[["self"],[R[3]]],["u64"]]],[11,R[179],E,R[180],5,[[["self"],[R[3]]],["u64"]]],[11,"get_int",E,R[181],5,[[["self"],[R[3]]],["i64"]]],[11,R[182],E,R[183],5,[[["self"],[R[3]]],["i64"]]],[11,"get_f32",E,R[133],5,[[["self"]],["f32"]]],[11,R[184],E,R[133],5,[[["self"]],["f32"]]],[11,"get_f64",E,R[134],5,[[["self"]],["f64"]]],[11,R[185],E,R[134],5,[[["self"]],["f64"]]],[11,"collect",E,R[186],5,[[],["b"]]],[11,"take",E,R[187],5,[[[R[3]]],["take"]]],[11,"chain",E,R[188],5,[[[U]],["chain"]]],[11,"by_ref",E,R[189],5,[[["self"]],["self"]]],[11,"reader",E,R[190],5,[[],["reader"]]],[8,"BufMut","bytes",R[191],N,N],[10,R[192],E,R[193],6,[[["self"]],[R[3]]]],[10,R[194],E,R[195],6,[[["self"],[R[3]]]]],[11,R[196],R[153],R[197],6,[[["self"]],["bool"]]],[10,R[198],"bytes",R[199],6,[[["self"]]]],[11,R[200],R[153],R[201],6,[[["self"]],[R[3]]]],[11,"put",E,R[135],6,[[["self"],["intobuf"]]]],[11,R[202],E,R[135],6,[[["self"]]]],[11,"put_u8",E,R[203],6,[[["self"],["u8"]]]],[11,"put_i8",E,R[204],6,[[["self"],["i8"]]]],[11,"put_u16",E,R[205],6,[[["self"],["u16"]]]],[11,R[206],E,R[207],6,[[["self"],["u16"]]]],[11,"put_i16",E,R[208],6,[[["self"],["i16"]]]],[11,R[209],E,R[210],6,[[["self"],["i16"]]]],[11,"put_u32",E,R[211],6,[[["self"],["u32"]]]],[11,R[212],E,R[213],6,[[["self"],["u32"]]]],[11,"put_i32",E,R[214],6,[[["self"],["i32"]]]],[11,R[215],E,R[216],6,[[["self"],["i32"]]]],[11,"put_u64",E,R[217],6,[[["self"],["u64"]]]],[11,R[218],E,R[219],6,[[["self"],["u64"]]]],[11,"put_i64",E,R[220],6,[[["self"],["i64"]]]],[11,R[221],E,R[222],6,[[["self"],["i64"]]]],[11,R[243],E,R[223],6,[[["self"],["u64"],[R[3]]]]],[11,R[224],E,R[225],6,[[["self"],["u64"],[R[3]]]]],[11,"put_int",E,R[226],6,[[["self"],["i64"],[R[3]]]]],[11,R[227],E,R[228],6,[[["self"],["i64"],[R[3]]]]],[11,"put_f32",E,R[136],6,[[["self"],["f32"]]]],[11,R[229],E,R[136],6,[[["self"],["f32"]]]],[11,"put_f64",E,R[137],6,[[["self"],["f64"]]]],[11,R[230],E,R[137],6,[[["self"],["f64"]]]],[11,"by_ref",E,R[231],6,[[["self"]],["self"]]],[11,"writer",E,R[232],6,[[],["writer"]]],[8,"IntoBuf","bytes",R[233],N,N],[16,"Buf",E,R[234],8,N],[10,"into_buf",E,R[235],8,[[]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[64],E,E,9,[[["self"]],[T]]],[11,R[65],E,E,9,[[[T],["self"]]]],[11,R[236],E,E,9,[[],["i"]]],[11,"into",E,E,9,[[],[U]]],[11,R[66],E,E,9,[[[U]],[R[0]]]],[11,R[67],E,E,9,[[],[R[0]]]],[11,R[68],E,E,9,[[["self"]],[T]]],[11,"borrow",E,E,9,[[["self"]],[T]]],[11,R[237],E,E,9,[[["self"]],["typeid"]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[64],E,E,10,[[["self"]],[T]]],[11,R[65],E,E,10,[[[T],["self"]]]],[11,R[236],E,E,10,[[],["i"]]],[11,"into",E,E,10,[[],[U]]],[11,R[66],E,E,10,[[[U]],[R[0]]]],[11,R[67],E,E,10,[[],[R[0]]]],[11,R[68],E,E,10,[[["self"]],[T]]],[11,"borrow",E,E,10,[[["self"]],[T]]],[11,R[237],E,E,10,[[["self"]],["typeid"]]],[11,"from",R[153],E,0,[[[T]],[T]]],[11,R[236],E,E,0,[[],["i"]]],[11,"into",E,E,0,[[],[U]]],[11,R[66],E,E,0,[[[U]],[R[0]]]],[11,R[67],E,E,0,[[],[R[0]]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[237],E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[236],E,E,1,[[],["i"]]],[11,"into",E,E,1,[[],[U]]],[11,R[66],E,E,1,[[[U]],[R[0]]]],[11,R[67],E,E,1,[[],[R[0]]]],[11,R[68],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[237],E,E,1,[[["self"]],["typeid"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[66],E,E,2,[[[U]],[R[0]]]],[11,R[67],E,E,2,[[],[R[0]]]],[11,R[68],E,E,2,[[["self"]],[T]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[237],E,E,2,[[["self"]],["typeid"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[66],E,E,3,[[[U]],[R[0]]]],[11,R[67],E,E,3,[[],[R[0]]]],[11,R[68],E,E,3,[[["self"]],[T]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[237],E,E,3,[[["self"]],["typeid"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[66],E,E,4,[[[U]],[R[0]]]],[11,R[67],E,E,4,[[],[R[0]]]],[11,R[68],E,E,4,[[["self"]],[T]]],[11,"borrow",E,E,4,[[["self"]],[T]]],[11,R[237],E,E,4,[[["self"]],["typeid"]]],[11,R[149],E,E,0,[[["self"]],[R[3]]]],[11,"bytes",E,E,0,[[["self"]]]],[11,R[238],E,E,0,[[["self"],[R[3]]]]],[11,R[152],E,E,0,[[["self"]],[R[3]]]],[11,R[149],E,E,3,[[["self"]],[R[3]]]],[11,"bytes",E,E,3,[[["self"]]]],[11,R[238],E,E,3,[[["self"],[R[3]]]]],[11,R[149],"bytes",E,9,[[["self"]],[R[3]]]],[11,"bytes",E,E,9,[[["self"]]]],[11,R[238],E,E,9,[[["self"],[R[3]]]]],[11,R[149],E,E,10,[[["self"]],[R[3]]]],[11,"bytes",E,E,10,[[["self"]]]],[11,R[238],E,E,10,[[["self"],[R[3]]]]],[11,R[192],R[153],E,0,[[["self"]],[R[3]]]],[11,R[198],E,E,0,[[["self"]]]],[11,R[194],E,E,0,[[["self"],[R[3]]]]],[11,R[200],E,E,0,[[["self"]],[R[3]]]],[11,R[192],"bytes",E,10,[[["self"]],[R[3]]]],[11,R[194],E,E,10,[[["self"],[R[3]]]]],[11,R[198],E,E,10,[[["self"]]]],[11,R[202],E,E,10,[[["self"]]]],[11,"put_u8",E,E,10,[[["self"],["u8"]]]],[11,"put_i8",E,E,10,[[["self"],["i8"]]]],[11,R[239],E,E,9,[[[T]],["self"]]],[11,R[239],E,E,10,[[[T]],["self"]]],[11,"next",R[153],E,1,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"size_hint",E,E,1,[[["self"]]]],[11,"extend","bytes",E,9,[[["self"],[T]]]],[11,"extend",E,E,9,[[["self"],[T]]]],[11,"extend",E,E,10,[[["self"],[T]]]],[11,"extend",E,E,10,[[["self"],[T]]]],[11,"eq",E,E,9,[[["bytes"],["self"]],["bool"]]],[11,"eq",E,E,10,[[[R[139]],["self"]],["bool"]]],[11,"eq",E,E,10,[[["self"]],["bool"]]],[11,"eq",E,E,10,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,10,[[["vec"],["self"]],["bool"]]],[11,"eq",E,E,10,[[["string"],["self"]],["bool"]]],[11,"eq",E,E,10,[[["self"],[T]],["bool"]]],[11,"eq",E,E,9,[[["self"]],["bool"]]],[11,"eq",E,E,9,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,9,[[["vec"],["self"]],["bool"]]],[11,"eq",E,E,9,[[["string"],["self"]],["bool"]]],[11,"eq",E,E,9,[[["self"],[T]],["bool"]]],[11,"eq",E,E,9,[[[R[139]],["self"]],["bool"]]],[11,"eq",E,E,10,[[["bytes"],["self"]],["bool"]]],[11,"as_ref",E,E,9,[[["self"]]]],[11,"as_ref",E,E,10,[[["self"]]]],[11,"from",E,E,9,[[[R[139]]],["bytes"]]],[11,"from",E,"Convert a `Vec` into a `Bytes`",9,[[["vec",["u8"]],["u8"]],["bytes"]]],[11,"from",E,E,9,[[["string"]],["bytes"]]],[11,"from",E,E,9,[[],["bytes"]]],[11,"from",E,E,9,[[["str"]],["bytes"]]],[11,"from",E,"Convert a `Vec` into a `BytesMut`",10,[[["vec",["u8"]],["u8"]],[R[139]]]],[11,"from",E,E,10,[[["string"]],[R[139]]]],[11,"from",E,E,10,[[],[R[139]]]],[11,"from",E,E,10,[[["str"]],[R[139]]]],[11,"from",E,E,10,[[["bytes"]],[R[139]]]],[11,"clone",E,E,9,[[["self"]],["bytes"]]],[11,"clone",E,E,10,[[["self"]],[R[139]]]],[11,"cmp",E,E,9,[[["bytes"],["self"]],[R[81]]]],[11,"cmp",E,E,10,[[[R[139]],["self"]],[R[81]]]],[11,"default",E,E,9,[[],["bytes"]]],[11,"default",E,E,10,[[],[R[139]]]],[11,R[236],R[153],E,0,[[]]],[11,R[236],"bytes",E,9,[[]]],[11,R[236],E,E,10,[[]]],[11,R[82],E,E,9,[[["bytes"],["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,10,[[[R[139]],["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,10,[[["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,10,[[["self"],["str"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,10,[[["vec"],["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,10,[[["string"],["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,10,[[["self"],[T]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,9,[[["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,9,[[["self"],["str"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,9,[[["vec"],["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,9,[[["string"],["self"]],[["option",[R[81]]],[R[81]]]]],[11,R[82],E,E,9,[[["self"],[T]],[["option",[R[81]]],[R[81]]]]],[11,"as_mut",E,E,10,[[["self"]]]],[11,"deref_mut",E,E,10,[[["self"]]]],[11,"fmt",R[153],E,0,[[["self"],[R[83]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[83]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[83]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[83]]],[R[0]]]],[11,"fmt",E,E,4,[[["self"],[R[83]]],[R[0]]]],[11,"fmt","bytes",E,9,[[["self"],[R[83]]],[R[0]]]],[11,"fmt",E,E,10,[[["self"],[R[83]]],[R[0]]]],[11,"write_str",E,E,10,[[["self"],["str"]],[R[0]]]],[11,"write_fmt",E,E,10,[[["self"],["arguments"]],[R[0]]]],[11,"deref",E,E,9,[[["self"]]]],[11,"deref",E,E,10,[[["self"]]]],[11,"hash",E,E,9,[[["self"],["h"]]]],[11,"hash",E,E,10,[[["self"],["h"]]]],[11,R[240],E,E,10,[[[R[241]]],["self"]]],[11,R[240],E,E,9,[[[R[241]]],["self"]]],[11,R[240],E,E,10,[[[R[241]]],["self"]]],[11,R[240],E,E,9,[[[R[241]]],["self"]]],[11,R[68],E,E,10,[[["self"]]]],[11,"borrow",E,E,9,[[["self"]]]],[11,"borrow",E,E,10,[[["self"]]]],[11,"fill_buf",R[153],E,2,[[["self"]],[R[0]]]],[11,"consume",E,E,2,[[["self"],[R[3]]]]],[11,"write",E,E,4,[[["self"]],[[R[3]],[R[0],[R[3]]]]]],[11,"flush",E,E,4,[[["self"]],[R[0]]]],[11,"read",E,E,2,[[["self"]],[[R[3]],[R[0],[R[3]]]]]],[11,R[152],E,R[154],5,[[["self"]],[R[3]]]],[11,R[156],E,R[157],5,[[["self"]],["bool"]]],[11,R[158],E,R[159],5,[[["self"]]]],[11,"get_u8",E,R[160],5,[[["self"]],["u8"]]],[11,"get_i8",E,R[161],5,[[["self"]],["i8"]]],[11,"get_u16",E,R[162],5,[[["self"]],["u16"]]],[11,R[163],E,R[164],5,[[["self"]],["u16"]]],[11,"get_i16",E,R[165],5,[[["self"]],["i16"]]],[11,R[166],E,R[167],5,[[["self"]],["i16"]]],[11,"get_u32",E,R[132],5,[[["self"]],["u32"]]],[11,R[168],E,R[132],5,[[["self"]],["u32"]]],[11,"get_i32",E,R[169],5,[[["self"]],["i32"]]],[11,R[170],E,R[171],5,[[["self"]],["i32"]]],[11,"get_u64",E,R[172],5,[[["self"]],["u64"]]],[11,R[173],E,R[174],5,[[["self"]],["u64"]]],[11,"get_i64",E,R[175],5,[[["self"]],["i64"]]],[11,R[176],E,R[177],5,[[["self"]],["i64"]]],[11,R[242],E,R[178],5,[[["self"],[R[3]]],["u64"]]],[11,R[179],E,R[180],5,[[["self"],[R[3]]],["u64"]]],[11,"get_int",E,R[181],5,[[["self"],[R[3]]],["i64"]]],[11,R[182],E,R[183],5,[[["self"],[R[3]]],["i64"]]],[11,"get_f32",E,R[133],5,[[["self"]],["f32"]]],[11,R[184],E,R[133],5,[[["self"]],["f32"]]],[11,"get_f64",E,R[134],5,[[["self"]],["f64"]]],[11,R[185],E,R[134],5,[[["self"]],["f64"]]],[11,"collect",E,R[186],5,[[],["b"]]],[11,"take",E,R[187],5,[[[R[3]]],["take"]]],[11,"chain",E,R[188],5,[[[U]],["chain"]]],[11,"by_ref",E,R[189],5,[[["self"]],["self"]]],[11,"reader",E,R[190],5,[[],["reader"]]],[11,R[196],E,R[197],6,[[["self"]],["bool"]]],[11,R[200],E,R[201],6,[[["self"]],[R[3]]]],[11,"put",E,R[135],6,[[["self"],["intobuf"]]]],[11,R[202],E,R[135],6,[[["self"]]]],[11,"put_u8",E,R[203],6,[[["self"],["u8"]]]],[11,"put_i8",E,R[204],6,[[["self"],["i8"]]]],[11,"put_u16",E,R[205],6,[[["self"],["u16"]]]],[11,R[206],E,R[207],6,[[["self"],["u16"]]]],[11,"put_i16",E,R[208],6,[[["self"],["i16"]]]],[11,R[209],E,R[210],6,[[["self"],["i16"]]]],[11,"put_u32",E,R[211],6,[[["self"],["u32"]]]],[11,R[212],E,R[213],6,[[["self"],["u32"]]]],[11,"put_i32",E,R[214],6,[[["self"],["i32"]]]],[11,R[215],E,R[216],6,[[["self"],["i32"]]]],[11,"put_u64",E,R[217],6,[[["self"],["u64"]]]],[11,R[218],E,R[219],6,[[["self"],["u64"]]]],[11,"put_i64",E,R[220],6,[[["self"],["i64"]]]],[11,R[221],E,R[222],6,[[["self"],["i64"]]]],[11,R[243],E,R[223],6,[[["self"],["u64"],[R[3]]]]],[11,R[224],E,R[225],6,[[["self"],["u64"],[R[3]]]]],[11,"put_int",E,R[226],6,[[["self"],["i64"],[R[3]]]]],[11,R[227],E,R[228],6,[[["self"],["i64"],[R[3]]]]],[11,"put_f32",E,R[136],6,[[["self"],["f32"]]]],[11,R[229],E,R[136],6,[[["self"],["f32"]]]],[11,"put_f64",E,R[137],6,[[["self"],["f64"]]]],[11,R[230],E,R[137],6,[[["self"],["f64"]]]],[11,"by_ref",E,R[231],6,[[["self"]],["self"]]],[11,"writer",E,R[232],6,[[],["writer"]]]],"p":[[3,"Chain"],[3,"IntoIter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[3,"Bytes"],[3,"BytesMut"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);